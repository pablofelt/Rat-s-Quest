// new module script

function random_perimeter_point(){
  return Random(800+600+800+600-1);
}

function getX(int randomPt){
  if (randomPt<800){
    return randomPt;
  }
  else if (randomPt<(800+600)){
    return 799;
  }
  else if (randomPt<(800+600+800)){
    return 799-(randomPt-800-600);
  }
  else{
    return 0;
  }
}

function getY(int randomPt){
  if (randomPt<800){
    return 0;
  }
  else if (randomPt<(800+600)){
    return randomPt-800;
  }
  else if (randomPt<(800+600+800)){
    return 599;
  }
  else{
    return 599-(randomPt-800-600-800);
  }
}

function repeatedly_execute() {
  
  // evil oma re-calibrates
  if (IsFinalChase && IsTimerExpired(8)){
    if (evilOma.room==player.room){
      // usually go towards shauna
      if (Random(10)<8){
        evilOma.Walk(player.x, player.y, eNoBlock, eWalkableAreas);
      }
      // but sometimes wander away
      else{
        evilOma.Walk(Random(800), Random(600), eNoBlock, eWalkableAreas);
      }
      
      if (Random(20)<18){
        if (Random(1)==0){
          evilOma.SayBackground("Come back here!");
        }
        else {
          evilOma.SayBackground("I only want to cut off your head!");
        }
      }
    }
    
    // update once a second
    SetTimer(8, GetGameSpeed()*1);
    
  }
  
  // bring in evilOma (if she isn't already here)
  if (IsFinalChase && IsTimerExpired(7)){
    SetTimer(7, 0);
  
    // check if she's here
    if (evilOma.room!=player.room){
      
      // find a valid random point along the perimeter of the room
      // valid means walkable and not too close
      int pt = random_perimeter_point();
      int x = getX(pt);
      int y = getY(pt);
      int trials = 0;
      bool failed = false;
      while (!failed && (GetWalkableAreaAt(x, y)==0 || distance(x, y, player.x, player.y)<50)){
        pt = random_perimeter_point();  
        trials++;
        
        // know when we are beat
        if (trials>10000){
          failed = true;
        }
      }
      
      if (!failed){
        // bring her in!
        evilOma.ChangeRoom(player.room, getX(pt), getY(pt));
      }
      else{        
        // try again later
        SetTimer(7, GetGameSpeed()*(Random(3)+1));
      }
    }
    
  }
}
  
//
// This  event  is  triggered in response to a number of standard AGS
// game events. See the AGS  manual  for more details.  The EVENT and 
// DATA parameters are used to decode the specific event as follows:
//
// EVENT                         DATA
// eEventEnterRoomBeforeFadein   new room number
// eEventLeaveRoom               room number they are leaving
// eEventGotScore                number of points they got
// eEventGUIMouseDown            GUI number
// eEventGUIMouseUp              GUI number
// eEventAddInventory            inventory item number that was added
// eEventLoseInventory           inventory item number that was lost
// eEventRestoreGame             save slot number
//-------------------------------------------------------------------
function on_event(EventType event, int data) {
  if (event==eEventEnterRoomBeforeFadein){
    // start the timers (that trigger evil oma chase)
    if (IsFinalChase){
      // dad disappears now
      doug.ChangeRoom(-1);
      // start up oma
      SetTimer(7, GetGameSpeed()*(Random(3)+1)); // enter room randomly
      SetTimer(8, 10);
    }
  }
}


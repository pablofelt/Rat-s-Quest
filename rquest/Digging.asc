// new module script

// only a single instance of this should exist
ParticleSystemManager PS;

// other variables
int dig_x_goal = -1;
int dig_y_goal = -1;
int hole_x = -1;
int hole_y = -1;
int dig_particle_system = -1;
bool dig_cancelled = false;
InventoryItem *digItem;
int digItemChance = -1;
int digRandomItemChance = -1;

function repeatedly_execute() {
  
  // put anything you want to happen every game cycle, even when
  // the game is paused, here
  
  if (IsGamePaused() == 1) return;
  
  /*****************
   * digging
  *****************/
  // check if we are walking to dig
  if (dig_x_goal!=-1 && dig_y_goal!=-1){
    // check if we are close to our goal 
    if (abs_val(player.x-dig_x_goal)<3 && abs_val(player.y-dig_y_goal)<3){  
    
      // start dig sound
      aChainsaw.Play();
      
      // start dig animation
      float x = IntToFloat(dig_x_goal);
      float y = IntToFloat(dig_y_goal);
      
      dig_particle_system = PS.CreateSystem(200, false, dtOverlay);
      
      /*
      // fireball style
      PS.emitter_creation_mode (dig_particle_system, rmAllways, 0, 1, 6);
      PS.emitter_set_position (dig_particle_system, ptCirle, x, y, 100., 0., 360.);
      PS.emitter_set_velocity (dig_particle_system, 20, 30, 0, 360);
      PS.emitter_set_age (dig_particle_system, 55, 80);
      PS.emitter_set_sprite (dig_particle_system, 102, 103);
      PS.action_set_bound_box (dig_particle_system, 0, 0, 800, 600);
      */
      
      // volcano style
      PS.emitter_creation_mode (dig_particle_system, rmAllways, 0, 2, 1);
      // adjust x and y values to compensate for particle sizes 
      PS.emitter_set_position (dig_particle_system, ptPoint, x-45., y-40.);
      
      PS.emitter_set_velocity (dig_particle_system, 150, 200, 260, 280);
      //PS.emitter_set_transparency (dig_particle_system, 10, 99);
      PS.emitter_set_age (dig_particle_system, 130, 140);
      PS.emitter_set_sprite (dig_particle_system, 102, 103);
      
      PS.action_set_bound_box (dig_particle_system, 0, 0, 800, FloatToInt(y));
      PS.action_add_force (dig_particle_system, ftConstant, 0.0, 9.8);
      
      // set animation end timer
      SetTimer(3, GetGameSpeed()*2);
      // remember where we will dig the hole
      hole_x = dig_x_goal;
      hole_y = dig_y_goal;
      // remember we are no longer walking anywhere
      dig_x_goal=-1;
      dig_y_goal=-1;
      
    }
  }

  // finished digging
  if (dig_particle_system!=-1 && IsTimerExpired(3)){
    
    // stop animation
    // why can't we delete more selectively?
    while (PS.num_systems>0){
      PS.DeleteLastSystem();
    }
    dig_particle_system=-1;
    
    // erase animation artifacts
    RawRestoreScreen();
    
    // did the dig finish successfully?
    if (!dig_cancelled){
      // leave hole      
      DrawingSurface *room = Room.GetDrawingSurfaceForBackground();
      DynamicSprite *hole = DynamicSprite.CreateFromExistingSprite(101, true);
      room.DrawImage(hole_x-(hole.Width/2), hole_y-(hole.Height/2), 101);
      hole.Delete();
      
      // uncover item?
      int chance = Random(100);
      if (digItem!=null && chance < digItemChance){
        // find the piano roll!
        DrawingSurface *surface = Room.GetDrawingSurfaceForBackground();
        surface.DrawImage(hole_x-(hole.Width/2), hole_y-(hole.Height/2), digItem.Graphic);
        Display("You found %s!",digItem.Name);
      }
      else if (chance < digItemChance+digRandomItemChance){
        // find a random object
        int randIndex = Random(7);
        int randItem = randIndex+108; // sample items 108-115
        DrawingSurface *surface = Room.GetDrawingSurfaceForBackground();
        surface.DrawImage(hole_x-(hole.Width/2), hole_y-(hole.Height/2), randItem);
        String randomItemNames[] = new String[8];
        randomItemNames[0] = "bat";
        randomItemNames[1] = "bataphant";
        randomItemNames[2] = "bunkey";
        randomItemNames[3] = "bunny";
        randomItemNames[4] = "elebat";
        randomItemNames[5] = "elephant";
        randomItemNames[6] = "monkey";
        randomItemNames[7] = "munny";
        Display("You found %s!",randomItemNames[randIndex]);
      }
      
      // remember this hole and item as part of the (semi)permanent screen state
      RawSaveScreen();
    }
    dig_cancelled = false;
  }
  
}


function dig(InventoryItem *item, int chanceToUncoverItem, int chanceToUncoverRandomItem){
  digItem = item;
  digItemChance = chanceToUncoverItem;
  digRandomItemChance = chanceToUncoverRandomItem;
  
  // expire the current digging animation (if applicable)
  if (dig_particle_system!=-1){
    SetTimer(3, 1);
    dig_cancelled = true;
  }
  // move towards a digging goal
  int x=mouse.x;
  int y=mouse.y;
  player.Walk(x, y);
  dig_x_goal=x;
  dig_y_goal=y;
  // see repeatedly_execute for the rest of the logic
}


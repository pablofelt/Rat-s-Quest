// only a single instance of this should exist
ParticleSystemManager PS;

function abs_val(int x){
  if (x<0){
    return -1 * x;
  }
  else{
    return x;
  }
}

// main global script file
function enforce_defaults(){
  SetMusicMasterVolume(100);
  sldMusic.Value = 200;
  sldSound.Value = 200;
  SetSoundVolume(200);
  SetGameSpeed(100);    
  sldSpeed.Value = 40; 
  if (IsSpeechVoxAvailable()) {
     SetVoiceMode(eSpeechVoiceAndText);
     btnVoice.Text = "Voice and Text";
     sldVoice.Value = 255;
     SetSpeechVolume(255);
  }
  if (System.SupportsGammaControl) {
    System.Gamma = 100;
    sldGamma.Value = 100;
  }
}

// A function that initializes a bunch of stuff.
function initialize_control_panel() { 
  // Centre the control panel
  gPanel.Centre(); 
  // Centre the Restart dialog as well
  gRestartYN.Centre(); 
  if (!IsSpeechVoxAvailable()) { 
    // If there is no speech-vox file, and therefore no speech,
    // disable all the controls related with speech.
    lblVoice.Visible = false;  
    btnVoice.Visible = false;  
    sldVoice.Visible = false;
  }
  else {
    // If there *is*, then set it to voice and text. It's best to use
    // both whenever possible, for the player's sake.
    SetVoiceMode(eSpeechVoiceAndText); 
    // And reflect this in the control panel.
    btnVoice.Text = "Voice and Text"; 
  }
  if (!System.SupportsGammaControl) {
    // If we can't change the gamma settings, disable the relevant options.
    sldGamma.Visible = false; 
    lblGamma.Visible = false;
  } 
  
  //And now, set all the defaults
  enforce_defaults();
}


// Called when the game starts, before the first room is loaded
function game_start() {   
  // Put the code all in a function and then just call the function. 
  // It saves cluttering up places like game_start.
  initialize_control_panel(); 
  
  // Use the KeyboardMovement module to, per default, replicate the standard
  // keyboard movement of most Sierra games. See KeyboardMovement.txt for more info
  KeyboardMovement.SetMode(eKeyboardMovement_Tapping); 
  
  // size of each image in the inventory
}


int dig_x_goal = -1;
int dig_y_goal = -1;
int hole_x = -1;
int hole_y = -1;
int dig_particle_system = -1;
bool dig_cancelled = false;
InventoryItem *digItem;
int digItemChance = -1;
int digRandomItemChance = -1;
function repeatedly_execute() {
  
  // put anything you want to happen every game cycle, even when
  // the game is paused, here
  
  if (IsGamePaused() == 1) return;

  // put anything you want to happen every game cycle, but not
  // when the game is paused, here
  
  // steph dance
  if (IsTimerExpired(1)){
    // random direction change
    if (stephanie.Room==player.Room){
      stephanie.Walk(Random(799), Random(599), eNoBlock, eAnywhere);
      SetTimer(1, 120);
    }
  }
  if (IsTimerExpired(2)){
    // dance end
    stephanie.ChangeRoom(-1);
    StreetsOfCairo.Stop();
  }
  
  /*****************
   * digging
  *****************/
  // check if we are walking to dig
  if (dig_x_goal!=-1 && dig_y_goal!=-1){
    // check if we are close to our goal (is there an abs operation?)
    if (abs_val(player.x-dig_x_goal)<3 && abs_val(player.y-dig_y_goal)<3){  
    
      // start dig sound
      aChainsaw.Play();
      
      // start dig animation
      float x = IntToFloat(dig_x_goal);
      float y = IntToFloat(dig_y_goal);
      
      dig_particle_system = PS.CreateSystem(200, false, dtOverlay);
      
      /*
      // fireball style
      PS.emitter_creation_mode (dig_particle_system, rmAllways, 0, 1, 6);
      PS.emitter_set_position (dig_particle_system, ptCirle, x, y, 100., 0., 360.);
      PS.emitter_set_velocity (dig_particle_system, 20, 30, 0, 360);
      PS.emitter_set_age (dig_particle_system, 55, 80);
      PS.emitter_set_sprite (dig_particle_system, 102, 103);
      PS.action_set_bound_box (dig_particle_system, 0, 0, 800, 600);
      */
      
      // volcano style
      PS.emitter_creation_mode (dig_particle_system, rmAllways, 0, 2, 1);
      // adjust x and y values to compensate for particle sizes 
      PS.emitter_set_position (dig_particle_system, ptPoint, x-45., y-40.);
      
      PS.emitter_set_velocity (dig_particle_system, 150, 200, 260, 280);
      //PS.emitter_set_transparency (dig_particle_system, 10, 99);
      PS.emitter_set_age (dig_particle_system, 130, 140);
      PS.emitter_set_sprite (dig_particle_system, 102, 103);
      
      PS.action_set_bound_box (dig_particle_system, 0, 0, 800, FloatToInt(y));
      PS.action_add_force (dig_particle_system, ftConstant, 0.0, 9.8);
      
      // set animation end timer
      SetTimer(3, 40*2);
      // remember where we will dig the hole
      hole_x = dig_x_goal;
      hole_y = dig_y_goal;
      // remember we are no longer walking anywhere
      dig_x_goal=-1;
      dig_y_goal=-1;
      
    }
  }
  
  // finished digging
  if (dig_particle_system!=-1 && IsTimerExpired(3)){
    
    // stop animation
    // why can't we delete more selectively?
    while (PS.num_systems>0){
      PS.DeleteLastSystem();
    }
    dig_particle_system=-1;
    
    // erase animation artifacts
    RawRestoreScreen();
    
    // did the dig finish successfully?
    if (!dig_cancelled){
      // leave hole      
      DrawingSurface *room = Room.GetDrawingSurfaceForBackground();
      DynamicSprite *hole = DynamicSprite.CreateFromExistingSprite(101, true);
      room.DrawImage(hole_x-(hole.Width/2), hole_y-(hole.Height/2), 101);
      hole.Delete();
      
      // uncover item?
      int chance = Random(100);
      if (digItem!=null && chance < digItemChance){
        // find the piano roll!
        DrawingSurface *surface = Room.GetDrawingSurfaceForBackground();
        surface.DrawImage(hole_x-(hole.Width/2), hole_y-(hole.Height/2), digItem.Graphic);
        Display("You found %s!",digItem.Name);
      }
      else if (chance < digItemChance+digRandomItemChance){
        // find a random object
        int randIndex = Random(7);
        int randItem = randIndex+108; // sample items 108-115
        DrawingSurface *surface = Room.GetDrawingSurfaceForBackground();
        surface.DrawImage(hole_x-(hole.Width/2), hole_y-(hole.Height/2), randItem);
        String randomItemNames[] = new String[8];
        randomItemNames[0] = "bat";
        randomItemNames[1] = "bataphant";
        randomItemNames[2] = "bunkey";
        randomItemNames[3] = "bunny";
        randomItemNames[4] = "elebat";
        randomItemNames[5] = "elephant";
        randomItemNames[6] = "monkey";
        randomItemNames[7] = "munny";
        Display("You found %s!",randomItemNames[randIndex]);
      }
      
      // remember this hole and item as part of the (semi)permanent screen state
      RawSaveScreen();
    }
    dig_cancelled = false;
  }
} // end repeatedly_execute()

function dig(InventoryItem *item, int chanceToUncoverItem, int chanceToUncoverRandomItem){
  digItem = item;
  digItemChance = chanceToUncoverItem;
  digRandomItemChance = chanceToUncoverRandomItem;
  
  // expire the current digging animation (if applicable)
  if (dig_particle_system!=-1){
    SetTimer(3, 1);
    dig_cancelled = true;
  }
  // move towards a digging goal
  int x=mouse.x;
  int y=mouse.y;
  player.Walk(x, y);
  dig_x_goal=x;
  dig_y_goal=y;
  // see repeatedly_execute for the rest of the logic
}



//
// This  event  is  triggered in response to a number of standard AGS
// game events. See the AGS  manual  for more details.  The EVENT and 
// DATA parameters are used to decode the specific event as follows:
//
// EVENT                         DATA
// eEventEnterRoomBeforeFadein   new room number
// eEventLeaveRoom               room number they are leaving
// eEventGotScore                number of points they got
// eEventGUIMouseDown            GUI number
// eEventGUIMouseUp              GUI number
// eEventAddInventory            inventory item number that was added
// eEventLoseInventory           inventory item number that was lost
// eEventRestoreGame             save slot number
//-------------------------------------------------------------------
function on_event (EventType event, int data) {
  // cheer for getting scores
  if (event == eEventGotScore){
    aCheer.Play(eAudioPriorityHigh);
  }
  // perform death sequences when appropriate
  if (event == eEventEnterRoomBeforeFadein){
    bool someoneDied = false;
    if (IsPaulMarkedForDeath && !IsPaulDead){
      IsPaulDead = true; // officially dead
      someoneDied = true;
    }
    else if (IsChristianMarkedForDeath && !IsChristianDead){
      IsChristianDead = true; // officially dead
      someoneDied = true;
    }
    else if (IsClaireMarkedForDeath && !IsClaireDead){
      IsClaireDead = true; // officially dead
      someoneDied = true;
    }
    else if (IsRichMarkedForDeath && !IsRichDead){
      IsRichDead = true; // officially dead
      someoneDied = true;
    }
    else if (IsMargotMarkedForDeath && !IsMargotDead){
      IsMargotDead = true; // officially dead
      someoneDied = true;
    }
    else if (IsTylerMarkedForDeath && !IsTylerDead){
      IsTylerDead = true; // officially dead
      someoneDied = true;
    }
    
    if (someoneDied){
      // play suspense music
      StartCutscene(eSkipESCOnly);
      aSpookyFanfare.Play(eAudioPriorityHigh);
      // block the global thread, preventing the next room from loading
      Wait(40*17); 
      // screaming 
      aScreaming.Play(eAudioPriorityHigh);
      Wait(40*2);
      shauna.SayBackground("What was that? You don't suppose that something BAD has happened to someone?");
      EndCutscene();
    }
    
  } // end event==eEventEnterRoomBeforeFadein
  
}

function show_inventory_window () 
{
  gInventory.Visible = true;
  // switch to the Use cursor (to select items with)
  mouse.Mode = eModeInteract;
  // But, override the appearance to look like the arrow
  mouse.UseModeGraphic(eModePointer);
}

function show_save_game_dialog()
{
  gSaveGame.Visible = true;
  // Get the list of save games
  lstSaveGamesList.FillSaveGameList();
  if (lstSaveGamesList.ItemCount > 0)
  {
    // If there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // No save games yet, default empty text.
    txtNewSaveName.Text = "";
  }
  mouse.UseModeGraphic(eModePointer);
  gIconbar.Visible = false;
}

function show_restore_game_dialog()
{
  gRestoreGame.Visible = true;
  lstRestoreGamesList.FillSaveGameList();
  mouse.UseModeGraphic(eModePointer);
  gIconbar.Visible = false;
}

function close_save_game_dialog()
{
  gSaveGame.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
}

function close_restore_game_dialog()
{
  gRestoreGame.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
}

// Called when a key is pressed. keycode holds the key's ASCII code
function on_key_press(eKeyCode keycode) {
  // The following is called before "if game is paused keycode=0", so
  // it'll happen even when the game is paused.
  
  if ((keycode == eKeyEscape) && gRestartYN.Visible) {
    //Use ESC to cancel restart.
    gRestartYN.Visible = false; 
    gIconbar.Visible = true;
    // If the panel's not ON, then the player must have gotten here by tapping F9,
    // therefore his cursor needs restoring. If the panel IS on, then it doesn't,
    // because it's already a pointer. Get used to thinking like this!!
    if (!gPanel.Visible) mouse.UseDefaultGraphic(); 
    return;
  }
  if ((keycode == eKeyEscape) && gPanel.Visible) {
    // Use ESC to turn the panel off.
    gPanel.Visible = false; 
    mouse.UseDefaultGraphic();
    gIconbar.Visible = true;
    return;
  }
  if ((keycode == eKeyEscape) && (gSaveGame.Visible))
  {
    // Use ESC to close the save game dialog
    close_save_game_dialog();
    return;
  }
  if ((keycode == eKeyEscape) && (gRestoreGame.Visible))
  {
    // Use ESC to close the restore game dialog
    close_restore_game_dialog();
    return;
  }
  
  if (keycode == eKeyReturn) { 
    // ENTER, in this case merely confirms restart
    if (gRestartYN.Visible) RestartGame();
  }

  if (IsGamePaused() || (IsInterfaceEnabled() == 0))
  {
    // If the game is paused with a modal GUI on the
    // screen, or the player interface is disabled in
    // a cut scene, ignore any keypresses.
    return;
  }

  // FUNCTION KEYS AND SYSTEM SHORTCUTS
  if (keycode == eKeyEscape) {
    // ESC
    gPanel.Visible = true; 
    gIconbar.Visible = false;
    mouse.UseModeGraphic(eModePointer);
  }
  if (keycode == eKeyCtrlQ)  QuitGame(1);   // Ctrl-Q
  if (keycode == eKeyF5) show_save_game_dialog();   // F5
  if (keycode == eKeyF7) show_restore_game_dialog();  // F7
  if (keycode == eKeyF9) {
    // F9, asks the player to confirm restarting (so much better to always confirm first)
    gRestartYN.Visible = true;  
    gIconbar.Visible = false;
    mouse.UseModeGraphic(eModePointer);
  }
  if (keycode == eKeyF12) SaveScreenShot("scrnshot.bmp");  // F12
  if (keycode == eKeyTab)   show_inventory_window();  // Tab, show inventory

  // GAME COMMAND SHORTCUTS
  if (keycode == 'W') mouse.Mode=eModeWalkto; //Notice this alternate way to indicate keycodes.
  if (keycode == 'L') mouse.Mode=eModeLookat; //Note that all we do here is set modes.
  if (keycode == 'U') mouse.Mode=eModeInteract; //If you want something else to happen, such as GUI buttons highlighting,
  if (keycode == 'T') mouse.Mode=eModeTalkto; //you'll need some more scripting done.
  if (keycode == 'I') mouse.Mode=eModeUseinv; //But this will, as-is, give you some standard keyboard shortcuts your players will very much appreciate.

  // For extra cursor modes, such as pick up, feel free to add as you will.
  // Uncomment the line below if you use the "Pick Up" mode.
  //if (keycode == 'P' || keycode == 'G') mouse.Mode=eModePickup; 

  // DEBUG FUNCTIONS
  if (keycode == eKeyCtrlS)  Debug(0,0);  // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV)  Debug(1,0);  // Ctrl-V, version
  if (keycode == eKeyCtrlA)  Debug(2,0);  // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX)  Debug(3,0);  // Ctrl-X, teleport to room
  if (keycode == eKeyCtrlW && game.debug_mode) 
    player.PlaceOnWalkableArea(); //Ctrl-W, move to walkable area 
}


function on_mouse_click(MouseButton button) {
  // called when a mouse button is clicked. button is either LEFT or RIGHT
  if (IsGamePaused() == 1) {
    // Game is paused, so do nothing (ie. don't allow mouse click)
  }
  else if (button == eMouseLeft) {
    ProcessClick(mouse.x, mouse.y, mouse.Mode );
  }
  else if (button == eMouseRight || button == eMouseWheelSouth){
    // right-click our mouse-wheel down, so cycle cursor
    mouse.SelectNextMode();
  }
  else if (button == eMouseMiddle) { 
    // Middle-button-click, default make character walk to clicked area (a little shortcut)
    // Could have been just "player.Walk(mouse.x,mouse.y)", but it's best to
    // leave our options open - what if you have a special script triggered
    // on "walking" mode?
    ProcessClick(mouse.x, mouse.y, eModeWalkto); 
  }
  else if (button == eMouseWheelNorth) { 
    // Mouse-wheel up, cycle cursors 
    // If mode isn't WALK, set the previous mode (notice usage of numbers instead
    // of eNums, when it suits us)...
    if (mouse.Mode>0) mouse.Mode=mouse.Mode-1; 
    else 
    { 
      // ...but if it is WALK mode...
      if (player.ActiveInventory!=null) 
      {
        //...and the player has a selected inventory item, set mouse mode to UseInv. 
        mouse.Mode=eModeUseinv; 
      }
      else 
      {
        // If they don't, however, just set it to mode TALK (change this line if you add more cursor modes)
        mouse.Mode=eModeTalkto; 
      }
    }
  }
}

function interface_click(int interface, int button) {
  // This function is obsolete, from 2.62 and earlier versions.
}

function btnInvUp_Click(GUIControl *control, MouseButton button) {
  invCustomInv.ScrollUp();
}

function btnInvDown_Click(GUIControl *control, MouseButton button) {
  invCustomInv.ScrollDown();
}

function btnInvOK_Click(GUIControl *control, MouseButton button) {
	// They pressed the OK button, close the GUI
	gInventory.Visible = false;
	mouse.UseDefaultGraphic();
}

function btnInvSelect_Click(GUIControl *control, MouseButton button) {
  
	// They pressed SELECT, so switch to the Get cursor
	mouse.Mode = eModeInteract;
	// But, override the appearance to look like the arrow
	mouse.UseModeGraphic(eModePointer);
}

function btnIconInv_Click(GUIControl *control, MouseButton button) {
  
  show_inventory_window();
}

function btnIconCurInv_Click(GUIControl *control, MouseButton button) {
  
  if (player.ActiveInventory != null)
    mouse.Mode = eModeUseinv;
}

function btnIconSave_Click(GUIControl *control, MouseButton button) 
{
  show_save_game_dialog();
}

function btnIconLoad_Click(GUIControl *control, MouseButton button) 
{
  show_restore_game_dialog();
}

function btnIconExit_Click(GUIControl *control, MouseButton button) {
  
  QuitGame(1);
}

function btnIconAbout_Click(GUIControl *control, MouseButton button) {
  
  gPanel.Visible=true;
  gIconbar.Visible=false;
  mouse.UseModeGraphic(eModePointer);
}

function guido_Look(){
  Display("You look irritable and grouchy.");
}

//START OF CONTROL PANEL FUNCTIONS
function btnSave_OnClick(GUIControl *control, MouseButton button)
{
  gPanel.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
  Wait(1);
  btnIconSave_Click(btnIconSave, eMouseLeft);
}

function gControl_OnClick(GUI *theGui, MouseButton button)
{

}

function btnAbout_OnClick(GUIControl *control, MouseButton button)
{
  Display("Created by Paul, Christian, and many involuntary participants.");
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  gPanel.Visible = false;
  Wait(1);
  QuitGame(1);
  gPanel.Visible = true;
  gIconbar.Visible = false;
  mouse.UseModeGraphic(eModePointer);
}

function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  gPanel.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
  Wait(1);
  btnIconLoad_Click(btnIconLoad, eMouseLeft);
}

function btnResume_OnClick(GUIControl *control, MouseButton button)
{
  gPanel.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
}

function sldMusic_OnChange(GUIControl *control)
{
  SetMusicMasterVolume(sldMusic.Value);  
}

function sldSound_OnChange(GUIControl *control)
{
  // This sets the sound volume. Note it'll also affect MOD and XM music - read the manual
  SetSoundVolume(sldSound.Value); 
}

function sldVoice_OnChange(GUIControl *control)
{
  // Sets voice volume. Note that we don't check for the existence of speech.vox - 
  // we did that in game_start, so if it's not there the slider won't even be available.
  SetSpeechVolume(sldVoice.Value); 
}

function btnVoice_OnClick(GUIControl *control, MouseButton button)
{
  // Note that we don't check for the existence of speech.vox - we did that in game_start,
  // so if it's not there the button won't even be available.
  if (btnVoice.Text == "Voice and Text") { 
    SetVoiceMode(eSpeechVoiceOnly); 
    btnVoice.Text = "Voice only";
  }
  else if (btnVoice.Text == "Voice only") {
    SetVoiceMode(eSpeechTextOnly);
    btnVoice.Text = "Text only";
  }
  else if (btnVoice.Text == "Text only") {
    SetVoiceMode(eSpeechVoiceAndText);
    btnVoice.Text = "Voice and Text";
  }
}

function sldGamma_OnChange(GUIControl *control)
{
  // Set the gamma. Note there's no need to check for anything else, as we ensured,
  // in game_start, that the slider won't even appear if it's not possible to do this.
  System.Gamma = sldGamma.Value; 
}

function btnDefault_OnClick(GUIControl *control, MouseButton button)
{
  // Reset everything to default. You'll have to edit these as well as the sliders
  // if you'd rather have different default parameters.
  enforce_defaults();
}
//END OF CONTROL PANEL FUNCTIONS

function dialog_request(int param) 
{
  // This is used by the dialog text parser if you need to process
  // text that the player types in to the parser.
  // It is not used by default.
}

function sldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(sldSpeed.Value);
}

function btnRestart_OnClick(GUIControl *control, MouseButton button)
{
  gRestartYN.Visible=true;
  gIconbar.Visible=false;
}

function btnRestartYes_OnClick(GUIControl *control, MouseButton button)
{
  RestartGame();
}

function btnRestartNo_OnClick(GUIControl *control, MouseButton button)
{
  gRestartYN.Visible = false;
  gIconbar.Visible = true;
  // If the panel's not ON, then the player must have gotten here by tapping F9,
  // therefore his cursor needs restoring. If the panel IS on, then it doesn't,
  // because it's already a pointer. Get used to thinking like this!!
  if (!gPanel.Visible) mouse.UseDefaultGraphic(); 
}

function btnCancelSave_OnClick(GUIControl *control, MouseButton button)
{
  close_save_game_dialog();
}

function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = lstSaveGamesList.ItemCount + 1;
  int i = 0;
  while (i < lstSaveGamesList.ItemCount)
  {
    if (lstSaveGamesList.Items[i] == txtNewSaveName.Text)
    {
      gameSlotToSaveInto = lstSaveGamesList.SaveGameSlots[i];
    }
    i++;
  }
  SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
  close_save_game_dialog();
}

function btnCancelRestore_OnClick(GUIControl *control, MouseButton button)
{
  close_restore_game_dialog();
}

function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }
  close_restore_game_dialog();
}

function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}

function txtNewSaveName_OnActivate(GUIControl *control)
{
  // Pressing return in the text box simulates clicking the Save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}

function gSaveGame_OnClick(GUI *theGui, MouseButton button)
{

}

function gInventory_OnClick(GUI *theGui, MouseButton button)
{

}

function btnLook_OnClick(GUIControl *control, MouseButton button)
{

}

/*************************************************
*   Global looking functions
**************************************************/

function display_beach_look_message(){
  int beach_look_index = Random(2);
  if (beach_look_index==0){
    Display("BEEECH!  BEEECH! . . . BEEEECH! You rang, m'lord?");
  }
  else if (beach_look_index==1){
    Display("The first thing that Stephanie thinks of when she hears the word \"beach\" is a beech tree on BYU campus that she has an inter-species crush on. She would marry it bigamously if she could. But she can't. And anyways, this isn't that sort of beech. This is a beach. Full of sand, and incapable of photosynthesis. So don't even think about it Stephanie! I have your number!");
  }
  else if (beach_look_index==2){
    Display("You contemplate melting the sand into glass, forming an enormous magnifying glass, and holding the denizens of the earth hostage until they met your demands. Regretfully you decide you don't have the time.");
  }
}

function display_tree_look_message(){
  int tree_look_index = Random(3);
  if (tree_look_index==0){
    Display("It must have rained recently. The trees smell like the skunk pond above the waterfall at Ogden. Old and flavorful.");
  }
  else if (tree_look_index==1){
    Display("The noble fir overarches the camp.");
  }
  else if (tree_look_index==2){
    Display("Did you know that if you chew on Aspen bark, your mouth will go numb?");
  }
  else if (tree_look_index==3){
    Display("The Larch!");
  }
}

function display_sky_look_message(){
  int sky_look_index = Random(2);
  if (sky_look_index==0){
    Display("That cloud looks like a bird.");
  }
  else if (sky_look_index==1){
    Display("That cloud looks like a boat.");
  }
  else if (sky_look_index==2){
    Display("That cloud looks like a cloud.");
  }
}

function display_grass_look_message(){
  int grass_look_index = Random(1);
  if (grass_look_index==0){
    Display("This grass is very green.");
  }
  else if (grass_look_index==1){
    Display("If you were a horse, this would look delicious.");
  }
}

function display_sidewalk_look_message(){
  int sidewalk_look_index = Random(2);
  if (sidewalk_look_index==0){
    Display("Follow the sidewalk.");
  }
  if (sidewalk_look_index==1){
    Display("It's hard. And it doesn't taste very good.");
  }
  if (sidewalk_look_index==2){
    Display("You try adding a little salt. Still tastes like cement.");
  }
}

function display_bush_look_message(){
  int bush_look_index = Random(2);
  if (bush_look_index==0){
    Display("What a nice bush.");
  }
  else if (bush_look_index==1){
    Display("Is that a dogwood? Or a lilac? You should have paid more attention in herbology.");
  }
  else if (bush_look_index==2){
    Display("Bushicus Leafulae");
  }
}

function display_bullrushes_look_message(){
  int bullrushes_look_index = Random(1);
  if (bullrushes_look_index==0){
    Display("Looks squishy.");
  }
  else if (bullrushes_look_index==1){
    Display("Looks brillig.");
  }
}

function display_lake_look_message(){
  int lake_look_index = Random(1);
  if (lake_look_index==0){
    Display("Looks wet.");
  }
  else if (lake_look_index==1){
    Display("Looks blue.");
  }
}

function display_mountains_look_message(){
  Display("Mountain.");
}

function display_pot_look_message(){
  Display("It's a pot.");
}

function display_door_look_message(){
  Display("You see the door tremble slightly. The wind? Or something more sinister?");
}

function display_steps_look_message(){
  Display("Watch your step!");
}

function display_driveway_look_message(){
  Display("The driveway has been soaking up sun all day long. It now gives off a pleasant glow.");
}


function display_roof_look_message(){
  int roof_look_index = Random(1);
  if (roof_look_index==0){
    Display("What does a doggie say?");
  }
  else if (roof_look_index==1){
    Display("You try to make conversation, but it remains a roof.");
  }
}

function display_chimney_look_message(){
  Display("This chimney is slightly blackened near the top.");
}

function shauna_Look()
{
  int shauna_look_index = Random(5);
  if (shauna_look_index==0){
    Display("You look great!");
  }
  else if (shauna_look_index==1){
    Display("Is that a hair out of place?");
  }
  else if (shauna_look_index==2){
    Display("You cross your eyes.");
  }
  else if (shauna_look_index==3){
    Display("You stick out your tongue.");
  }
  else if (shauna_look_index==4){
    Display("You flex your muscles.");
  }
  else if (shauna_look_index==5){
    Display("A third eye opens briefly on your forehead, then closes again.");
  }
}


function guido_Talk()
{
  guido.Think("The filthy mudblood speaks to him. He will pretend he does not hear.");
}

function guido_Interact()
{
  guido.Say("Grrrr . . .");
  Display("You'd better keep you hands to yourself. He's a smiley doggy.");
}

function guido_UseInv()
{
  Display("You don't think Guido would appreciate having that used on him.");
}

function shauna_Talk()
{
  // choose a random action
  int shauna_talk_index = Random(4);
  
  // do the action
  if (shauna_talk_index==0){
    Display("You clear your throat nervously.");
  }
  else if (shauna_talk_index==1){
    shauna.SayBackground("Hello?");
  }
  else if (shauna_talk_index==2){
    shauna.SayBackground("Is anybody there?");
  }
  else if (shauna_talk_index==3){
    shauna.SayBackground("Show youself!");
  }
  else if (shauna_talk_index==4){
    String response = Game.InputBox("You call out: ");
    player.SayBackground(response);
    if (response=="435-674-424H"){
      Display("You sense an exotic presense drawing near . . . ");
      stephanie.ChangeRoom(player.Room, Random(799), Random(599));
      StreetsOfCairo.Play(eAudioPriorityHigh);
      // direction timer
      SetTimer(1, 60);
      // total dance timer
      SetTimer(2, 40*100);
    }
  }
  
}

function shauna_Interact()
{
  Display("You tuck a loose hair behind your ear.");
}

function shauna_UseInv()
{
  shauna.SayBackground("No thanks. I already have one of those.");
}

function iShovel_Look()
{
  Display("You love your little shovel.");
}

function paul_Talk()
{
  dPaul0.Start();
}

function shelley_Talk()
{
  dShelley0.Start();
}

function paul_UseInv()
{
  // give paul the piano roll --> he is now dead
  if (player.ActiveInventory==iPianoRoll){
    GiveScore(5);
    paul.SayBackground("Thanks! I've been looking all over for this. Margot will sure be mad when she discovers I've got it.");
    player.LoseInventory(iPianoRoll);
    IsPaulMarkedForDeath=true;
  }
  else{
    paul.SayBackground("No thanks.");
  }
}

function doug_Talk()
{
  dDoug0.Start();
}

function iPianoRoll_Look()
{
  Display("It's the Hello Dolly piano roll that Paul has been looking for!");
}

function iPianoRoll_Talk()
{
  Display("You hum a few bars of Hello Dolly");
}

function iTuningFork_Look()
{
  Display("Musicians use these to stay on key.");
}

function iTuningFork_Talk()
{
  shauna.SayBackground("Doe, a deer, a female deer . . .");
}

function iFamilyTree_Look()
{
  Display("This imaginative geneology traces the family all the way back to Queen Victoria!");
}

function iShovel_Talk()
{
  Display("The shovel returns your greeting in a gravelly voice");
}

function iFamilyTree_Talk()
{
  Display("You loudly declaim your lineage until you realize that nobody is listening.");
}

function deadPaul_Look()
{
  int index = Random(7);
  if (index==0){
    Display("It looks like somebody did him in with a garden shovel. How undignified.");
  }
  else if (index==1){
    Display("Yep. He's really dead.");
  }
  else if (index==2){
    Display("Paul's body is covered with a thin spray of sand. You examine the sand around him for footprints, but fail to find anything useful.");
  }
  else if (index==3){
    Display("You examine the body for clues. No luck.");
  }
  else if (index==4){
    Display("Your eyes are strangely drawn to body on the sand.");
  }
  else if (index==5){
    Display("Other than the stab wound in Paul's neck, there is no sign of a struggle. Whoever did this must have been able to close to Paul without alarming him.");
  }
  else if (index==6){
    Display("Blood drips softly into the sand.");
  }
  else if (index==7){
    Display("Flies are beginning to gather around the body. You briefly consider covering him, then decide that there is no time. You must catch the murderer!");
  }
}

function deadPaul_Talk()
{
  shauna.SayBackground("I will avenge your murder!");
  Display("Paul does not respond.");
}

function deadPaul_UseInv()
{
  Display("He won't be needing that anymore.");
}

function deadPaul_PickUp()
{
  Display("You rifle Paul's pockets, but find nothing worth keeping.");
}

function paul_Look()
{
  Display("You notice that Paul hasn't shaved in a few days, and tisk quietly to yourself.");
}

function paul_PickUp()
{
  Display("You give Paul a hug.");
}

function margot_Talk()
{
  dMargot0.Start();
}

function claire_Talk()
{
  dClaire0.Start();
}

function rich_Talk()
{
  dRich0.Start();
}

function tyler_Talk()
{
  dTyler0.Start();
}

function stephanie_Talk()
{
  Display("The apparitions smiles mysteriously but does not answer.");
}

function stephanie_Look()
{
  Display("The mystical being captivates you. Have you seen her somewhere before?");
}

function stephanie_PickUp()
{
  Display("No touchee!");
}

function christian_Talk()
{
  dChristian0.Start();
}

function christian_Look()
{
  Display("You pause for a moment to admire the patrician nose, strong chin, and delicately tapered fingers.");
}

function christian_PickUp()
{
  Display("You attempt to stuff Christian in your bag, but he won't fit.");
}

function christian_UseInv()
{
  if (player.ActiveInventory==iTuningFork){
    
    StartCutscene(eSkipESCOnly);
    player.LoseInventory(iTuningFork);
    christian.Say("What's this?");
    Display("Christian strikes the tuning fork against one hand, then holds it next to his ear.");
    christian.Say("Hmmm . . . C#. Wait! That's it!");
    // start music
    aHelloDolly.PlayFrom(0, eAudioPriorityHigh, eOnce);
    int seconds = 0;
    while (seconds < 28){
      christian.Walk(Random(799)+1, Random(599)+1, eNoBlock, eWalkableAreas);  
      Wait(GetGameSpeed()*2);
      seconds += 2;
    }
    christian.Walk(600, 340, eNoBlock, eWalkableAreas);
    Wait(GetGameSpeed()*2);
    EndCutscene();
    
    // christian has been appeased
    HasChristianBeenAppeased = true;
    GiveScore(5);
  }
  else{
    christian.SayBackground("No, thank you.");
  }
}

//===================================================================
// *** AGS MODULE SCRIPT ***
//
// Module: ParticleSystemManager
//
// Author: Miguel García Díaz (Jerakeen)
//
// Require: AGS 3.0
//
// 1 Abstract
//
// This module has been built to simulate effects like rain, waterfall,
// fire, smoke, snow and others.
//
// We can have some particle systems at the same time.
// We can define some forces wich modifies particles velocity and
// position.
// We can change color, transparency and scale of particles.
// And we can choose between draw a particle system in the background
// of a room, in a sprite or using an overlay.
//
// 
// 3 Revision History
//
// <11-JAN-09> Jerakeen,   created original version
//
//
// 4 License
//
// This  module  is  free  software;  you  can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as  published  by the Free Software Foundation; either version 2.1 
// of the License, or any later version.
//
// This module is distributed in the hope that it will be useful, but
// WITHOUT  ANY  WARRANTY;  without  even  the  implied  warranty  of 
// MERCHANTABILITY or  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You  should  have received a copy of the GNU Lesser General Public
// License along with this library; if not,write to the Free Software
// Foundation, Inc, 59 Temple Place, Suite 330, Boston, MA 02111-1307  
// USA.
//
// Copyright (C) 2009  Jerakeen
//-------------------------------------------------------------------

//-------------------------------------------------------------------
// Configuration Constants
//-------------------------------------------------------------------

#define PARTICLES_MAX        600   // maximum number of particles
#define PARTICLESYSTEM_MAX    10   // maximum number of particles systems

#define NUM_FORCES_MAX        10   // maximum number of forces applied to a
                                   // system such as wind, gravity, etc.


//-------------------------------------------------------------------
// Variables 
//-------------------------------------------------------------------


struct Particle
{
  float x;                 // the position on the x-axis ( in pixel )
  float y;                 // the position on the y-axis ( in pixel )
  float old_x;
  float old_y;
  float velocity_x;        // the velocity on the x-axis ( in pixel )
  float velocity_y;        // the velocity on the y-axis ( in pixel )
  float angle;
  float speed;
  int   age;               // the number of frames it already lifes
  int   max_age;           // max frames to live
  float color_r;           // the color values for red, green and blue
  float color_g;
  float color_b;
  float saturation;
  int	  sprite_slot;       // the sprite slot of the particle sprite
  int   transparency;			 // the transparency of the particle sprite
  int   scale;

  // Evolution variables
  float fx_inc[NUM_FORCES_MAX];
  float fy_inc[NUM_FORCES_MAX];
  float fx[NUM_FORCES_MAX];
  float fy[NUM_FORCES_MAX];
  int   num_forces;

  int   inc_transparency;
  int   inc_scale;
  
  int   inc_color;
  float inc_color_r, inc_color_g, inc_color_b;
  float inc_saturation;
};



struct ParticlesSystem
{
  // VARIABLES
  
  bool  use_this_system;

  bool  keep_track;

  enDrawType where_to_draw;

  int sprWidth, sprHeight;
  DynamicSprite *sprParticleSystem;
  Overlay *ovrParticleSystem;


  // Index of particles
  int   first_particle;
  int   last_particle;
  
  int   num_particles;
  int   num_active_particles;

  
  // RANKS OF INITIAL VALUES

  // Position rank
  enPosType PositionType;
  float em_p1, em_p2, em_p3, em_p4, em_p5, em_p6;

  // Velocity rank
  int min_speed, max_speed;
  int min_angle, max_angle;

  // Color
  bool use_color;
  int min_color_r, min_color_g, min_color_b, min_saturation;
  int max_color_r, max_color_g, max_color_b, max_saturation;

  // Transparency
  bool use_transparency;
  int min_transparency, max_transparency;
  
  // Scale
  bool use_scale;
  int  min_scale, max_scale;

  // Age
  int min_age, max_age;
  
  // Sprite
  int min_slot, num_slots;


  // How & when to create particles
  // and number of particles to create
  enRepeatMode  emit_rep_mode;
  int   max_rep;
  int   num_rep;
  int   emit_frecuency;
  int   emit_num_particles;
  int   inc_emit_frecuency;

  // Bound box of particle system
  bool  use_bound;
  int   bound_min_x, bound_max_x;
  int   bound_min_y, bound_max_y;


  // EVOLUTION VARIABLES

  bool  evolve_color;
  int   to_color_r, to_color_g, to_color_b, to_saturation;
  int   frec_color;
  
  bool  evolve_transparency;
  int   to_transparency;
  int   frec_transparency;

  bool  evolve_scale;
  int   to_scale;
  int   frec_scale;



  // FORCES VARIABLES
  enForceType ft[NUM_FORCES_MAX];
  float fx_min[NUM_FORCES_MAX];
  float fy_min[NUM_FORCES_MAX];
  float fx_max[NUM_FORCES_MAX];
  float fy_max[NUM_FORCES_MAX];
  
  float fx_inc[NUM_FORCES_MAX];
  float fy_inc[NUM_FORCES_MAX];
  
  int   num_forces;
//  float fx, fy;         // total force



  /* FUNCTIONS */
  import function DeleteParticleNear(int x, int y, int threshold);
  import function IsParticleNear(int x, int y, int threshold);
  import function Create( int n_particles, bool keep_track = false, enDrawType draw_type = dtBackground, int width = 0, int height = 0 );
  import function Delete();
  
  import function create_particle (  );
  import function remove_particle ( int particle_id );
  import function update_particles ( );

};





// define an array of particles
Particle AllParticles[PARTICLES_MAX];

// define an array of particles systems
ParticlesSystem AllParticlesSystems[PARTICLESYSTEM_MAX];

// total particles and systems
int num_particles;
int num_systems;       // used in repeatedly_execute_always




//-------------------------------------------------------------------
// Functions
//-------------------------------------------------------------------


// PARTICLES SYSTEM FUNCTIONS

function abs_val(int x){
  if (x<0){
    return -1 * x;
  }
  else{
    return x;
  }
}

function ParticlesSystem::Create (int n_particles, bool keep_track, enDrawType draw_type, int width, int height)
{
  this.num_particles = n_particles;
  this.num_active_particles = 0;
  
  this.first_particle = num_particles;
  // paul: this looks like a bug to me?
  // I think this is trying to do keep track of offsets among multiple systems?
  this.last_particle = num_particles + n_particles - 1; 

  num_particles += n_particles;


  this.use_this_system = true;
  
  this.keep_track = keep_track;

  this.where_to_draw = draw_type;
  
  if (draw_type == dtSprite)
  {
    if (this.sprParticleSystem)
      this.sprParticleSystem.Delete();
    this.sprParticleSystem = DynamicSprite.Create(width, height);
  
    this.sprWidth = width;
    this.sprHeight = height;
  }
  else if (draw_type == dtOverlay)
  {
    if (this.sprParticleSystem)
      this.sprParticleSystem.Delete();
    this.sprParticleSystem = DynamicSprite.Create(Room.Width, Room.Height);
  
    this.sprWidth = Room.Width;
    this.sprHeight = Room.Height;
  }


  // Velocity
  this.min_speed = 0;
  this.max_speed = 0;
  this.min_angle = 0;
  this.max_angle = 0;

  // Color
  this.min_color_r = -1;
  this.min_color_g = -1;
  this.min_color_b = -1;
  this.min_saturation = -1;
  this.max_color_r = -1;
  this.max_color_g = -1;
  this.max_color_b = -1;
  this.max_saturation = -1;

  // Transparency
  this.min_transparency = -1;
  this.max_transparency = -1;
  
  // Age
  this.min_age = -1;
  this.max_age = -1;
  
  // Sprite slot
  this.min_slot = -1;
  this.num_slots = -1;

  //scale
  this.min_scale = -1;
  this.max_scale = -1;

  this.use_scale = false;
  this.use_color = false;
  this.use_transparency = false;

  // Particle's creation
  this.emit_rep_mode = rmAllways;
  this.max_rep = 0;
  this.num_rep = 0;
  this.emit_frecuency = 0;
  this.emit_num_particles = 0;
  this.inc_emit_frecuency = 0;

  this.use_bound = false;
  this.evolve_color = false;
  this.evolve_transparency = false;
  this.evolve_scale = false;

  this.num_forces = 0;
//  this.fx = 0.0;
//  this.fy = 0.0;


  int i = this.first_particle;
  while (i <= this.last_particle)
  {
    AllParticles[i].age = 0;
    
    i++;  
  }

}


function ParticlesSystem::Delete ()
{
  this.use_this_system = false;

  num_particles -= this.num_particles;
  
  this.first_particle = 0;
  this.last_particle = 0;
  this.num_active_particles = 0;
  this.num_particles = 0;

  if (this.ovrParticleSystem != null &&
      this.ovrParticleSystem.Valid)
    this.ovrParticleSystem.Remove();
    
  if (this.sprParticleSystem)
    this.sprParticleSystem.Delete();

}


function ParticlesSystem::create_particle ( )
{
  float angle, speed, radio;
	int   particle_id;
	
	// use a backward while loop to determine which particle should be created
	// we should then come up with the particle with the smallest 'particle_id' value
	// but which still has its framecounting age variable set to 0
	
  particle_id = -1;

  int i = this.last_particle;
	while ( i >= this.first_particle)
	{
		// if the age variable equals 0
		if ( AllParticles[i].age == 0 )
		{
			// then we will mark this partcile
			particle_id = i;
		}

		i--;
	}

  // If we haven't found a inactive particle return
  if (particle_id == -1)
    return;


  this.num_active_particles ++;

	// now that we have the ID value for the particle we want to create, we now have to
	// set some initial values / settings for it
	
	// set its position
  if (this.PositionType == ptPoint)
  {
    // em_p1 = x, em_p2 = y
	  AllParticles[particle_id].x = this.em_p1;
	  AllParticles[particle_id].y = this.em_p2;
  }
  else if (this.PositionType == ptCirle)
  {
    // em_p1 = center.x, emp_p2 = center.y, em_p3 = radio
    // em_p4 = min_angle, em_p5 = max_angle
    angle = Maths.DegreesToRadians (IntToFloat(Random(FloatToInt(this.em_p5 - this.em_p4))) + this.em_p4);
    AllParticles[particle_id].x = this.em_p1 + Maths.Cos ( angle ) * IntToFloat (Random (FloatToInt(this.em_p3)));
    AllParticles[particle_id].y = this.em_p2 + Maths.Sin ( angle ) * IntToFloat (Random (FloatToInt(this.em_p3)));
  }
  else if (this.PositionType == ptCrown)
  {
    // em_p1 = center.x, emp_p2 = center.y, em_p3 = min_radio
    // em_p4 = max_radio, em_p5 = min_angle, em_p6 = max_angle
    
    angle = Maths.DegreesToRadians (IntToFloat(Random(FloatToInt(this.em_p6 - this.em_p5))) + this.em_p5);
    radio = IntToFloat(Random(FloatToInt(this.em_p4 - this.em_p3))) + this.em_p3;
    AllParticles[particle_id].x = this.em_p1 + Maths.Cos ( angle ) * radio;
    AllParticles[particle_id].y = this.em_p2 + Maths.Sin ( angle ) * radio;
  }
  else if (this.PositionType == ptBox)
  {
    // em_p1 = x1, em_p2 = y1, em_p3 = x2, em_p4 = y2
    AllParticles[particle_id].x = this.em_p1 + IntToFloat (Random (FloatToInt(this.em_p3-this.em_p1)));
    AllParticles[particle_id].y = this.em_p2 + IntToFloat (Random (FloatToInt(this.em_p4-this.em_p2)));
  }
  else if (this.PositionType == ptLine)
  {
    // em_p1 = x1, em_p2 = y1, em_p3 = x2, em_p4 = y2
    
    float U;

    // U must be between 0 and 1
    U = IntToFloat (Random (100)) / 100.0;
 
    AllParticles[particle_id].x = this.em_p1 + U * ( this.em_p3 - this.em_p1 );
    AllParticles[particle_id].y = this.em_p2 + U * ( this.em_p4 - this.em_p2 );
  }
  else if (this.PositionType == ptMousePosition)
  {
    AllParticles[particle_id].x = IntToFloat ( GetViewportX ( ) + mouse.x );
    AllParticles[particle_id].y = IntToFloat ( GetViewportY ( ) + mouse.y );
  }

  // Retain old position
  AllParticles[particle_id].old_x = AllParticles[particle_id].x;
  AllParticles[particle_id].old_y = AllParticles[particle_id].y;


	// set its sprite
  if (this.num_slots != 0)
    AllParticles[particle_id].sprite_slot = Random ( this.num_slots ) + this.min_slot;
  else
    AllParticles[particle_id].sprite_slot = this.min_slot;


  // set its transparency
  if (this.use_transparency)
  {
    if (this.min_transparency != this.max_transparency)
      AllParticles[particle_id].transparency = Random ( this.max_transparency-this.min_transparency) + this.min_transparency;
    else
      AllParticles[particle_id].transparency = this.min_transparency;
  }
  else
    AllParticles[particle_id].transparency =  0;
 
 
  // Set its scale
	if (this.use_scale)
  {
    if (this.max_scale == this.min_scale)
      AllParticles[particle_id].scale = this.min_scale;
    else
      AllParticles[particle_id].scale = Random (this.max_scale-this.min_scale) + this.min_scale;
  }
  else
    AllParticles[particle_id].scale = 100;


  // and set its age variable to 1
	AllParticles[particle_id].age = 1;

	// set max_age
  if (this.max_age == this.min_age)
    AllParticles[particle_id].max_age = this.min_age;
  else
    AllParticles[particle_id].max_age = Random (this.max_age-this.min_age)+this.min_age;

  
  
	// set its color
	if (this.use_color)
  {
    AllParticles[particle_id].color_r = IntToFloat (Random ( this.max_color_r-this.min_color_r ) + this.min_color_r);
	  AllParticles[particle_id].color_g = IntToFloat (Random ( this.max_color_g-this.min_color_g ) + this.min_color_g);
	  AllParticles[particle_id].color_b = IntToFloat (Random ( this.max_color_b-this.min_color_b ) + this.min_color_b);
    AllParticles[particle_id].saturation = IntToFloat (Random (this.max_saturation - this.min_saturation) + this.min_saturation);
  }
  
  if (this.evolve_color)
  {
    if (this.use_color)
    {
      AllParticles[particle_id].inc_color_r = (IntToFloat (this.to_color_r) - AllParticles[particle_id].color_r) / IntToFloat(AllParticles[particle_id].max_age);
      AllParticles[particle_id].inc_color_g = (IntToFloat (this.to_color_g) - AllParticles[particle_id].color_g) / IntToFloat(AllParticles[particle_id].max_age);
      AllParticles[particle_id].inc_color_b = (IntToFloat (this.to_color_b) - AllParticles[particle_id].color_b) / IntToFloat(AllParticles[particle_id].max_age);
      AllParticles[particle_id].inc_saturation = (IntToFloat (this.to_saturation) - AllParticles[particle_id].saturation) / IntToFloat (AllParticles[particle_id].max_age);
    }
  }

	

	// now choose a speed from min to max
	if (this.max_speed == this.min_speed)
    speed = IntToFloat (this.min_speed);
  else
    speed = IntToFloat ( Random ( this.max_speed - this.min_speed) + this.min_speed );

  // and choose an angle from min to max ( in radians )
  if (this.max_angle == this.min_angle)
    angle = Maths.DegreesToRadians (IntToFloat(this.min_angle));
  else
    angle = Maths.DegreesToRadians (IntToFloat(Random(this.max_angle-this.min_angle)+this.min_angle));

  AllParticles[particle_id].speed = speed;
  AllParticles[particle_id].angle = angle;

  // and then set its velocity to its correct value
  AllParticles[particle_id].velocity_x = Maths.Cos ( angle ) * speed;
  AllParticles[particle_id].velocity_y = Maths.Sin ( angle ) * speed;


  // Set forces variables
  int f = 0;
  while (f < this.num_forces)
  {
    if (this.ft[f] == ftSidetoSide)
    {
      AllParticles[particle_id].fx_inc[f] = this.fx_inc[f];
      AllParticles[particle_id].fy_inc[f] = this.fy_inc[f];
    
      AllParticles[particle_id].fx[f] = IntToFloat (Random (FloatToInt(this.fx_max[f]-this.fx_min[f]))) + this.fx_min[f];
      AllParticles[particle_id].fy[f] = IntToFloat (Random (FloatToInt(this.fy_max[f]-this.fy_min[f]))) + this.fy_min[f];
    
    }
    else if (this.ft[f] == ftLateral)
    {
      AllParticles[particle_id].fx[f] = IntToFloat (Random (FloatToInt(this.fy_min[f]-this.fx_min[f]))) + this.fx_min[f];
    }
    
    f++;
  }

  AllParticles[particle_id].inc_transparency = 0;
  AllParticles[particle_id].inc_color = 0;
  AllParticles[particle_id].inc_scale = 0;
}



function ParticlesSystem::remove_particle ( int particle_id )
{
	// set the particles age variable to 0
	AllParticles[particle_id].age = 0;

  this.num_active_particles--;
}



function ParticlesSystem::update_particles ( )
// this function needs to get called every frame and handles the particles
{
  float fx, fy;
  int f;
	int i;
  int width, height;

	// if we are in repeatedly mode
  
  if ( this.emit_rep_mode == rmAllways)
  {
    this.inc_emit_frecuency ++;
    
    if (this.inc_emit_frecuency >= this.emit_frecuency)
    {
      this.inc_emit_frecuency = 0;
    
      int j = 0;
      while ( j < this.emit_num_particles )
      {
        this.create_particle ();
      
        j++;
      }
    }
  }
  else if (this.emit_rep_mode == rmNumberOfTimes)
  {
    if (this.num_rep < this.max_rep && this.num_active_particles == 0)
    {
      this.inc_emit_frecuency ++;
      
      if (this.inc_emit_frecuency >= this.emit_frecuency)
      {
        this.inc_emit_frecuency = 0;

        int j = 0;
        while ( j < this.emit_num_particles )
        {
          this.create_particle ();
          j++;
        }
        
        // increase repetition counter
        this.num_rep++;
      }
    }
    
    if (this.num_rep >= this.max_rep && this.num_active_particles == 0)
      this.use_this_system = false;
  }



  DrawingSurface *surface;
  
  if (this.where_to_draw == dtBackground)
  {
    surface = Room.GetDrawingSurfaceForBackground();
  }
  else if (this.where_to_draw == dtOverlay)
  {
    surface = this.sprParticleSystem.GetDrawingSurface();
    if (this.keep_track == false)
      surface.Clear();
  }
  else if (this.where_to_draw == dtSprite)
  {
    surface = this.sprParticleSystem.GetDrawingSurface();
    if (this.keep_track == false)
      surface.Clear();
  }


	// loop through all particles
  
  i = this.first_particle;
	while ( i <= this.last_particle )
	{
		// if the particle is active
		if ( AllParticles[i].age != 0 )
		{
      // update its velocity from the forces
      
      fx = 0.0;
      fy = 0.0;
			f = 0;
      while (f < this.num_forces)
      {
        if (this.ft[f] == ftConstant)
        {
          fx += this.fx_min[f];
          fy += this.fy_min[f];
        }
        else if (this.ft[f] == ftRandom)
        {
          fx += IntToFloat ( Random (FloatToInt (this.fx_max[f] - this.fx_min[f]))) + this.fx_min[f];
          fy += IntToFloat ( Random (FloatToInt (this.fy_max[f] - this.fy_min[f]))) + this.fy_min[f];
        }
        else if (this.ft[f] == ftSidetoSide)
        {
          if (AllParticles[i].fx_inc[f] != 0.0)
          {
            if (AllParticles[i].fx[f] >= this.fx_max[f] ||
                AllParticles[i].fx[f] <= this.fx_min[f])
              AllParticles[i].fx_inc[f] = -AllParticles[i].fx_inc[f];

            AllParticles[i].fx[f] += AllParticles[i].fx_inc[f];
            fx += AllParticles[i].fx_inc[f];
          }
          
          if (AllParticles[i].fy_inc[f] != 0.0)
          {
            if (AllParticles[i].fy[f] >= this.fy_max[f] ||
                AllParticles[i].fy[f] <= this.fy_min[f])
              AllParticles[i].fy_inc[f] = -AllParticles[i].fy_inc[f];

            AllParticles[i].fy[f] += AllParticles[i].fy_inc[f];
            fy += AllParticles[i].fy_inc[f];
          }
          
        }
        else if (this.ft[f] == ftParticleDirection)
        {
          fx = Maths.Cos ( AllParticles[i].angle ) * this.fx_min[f];
          fy = Maths.Sin ( AllParticles[i].angle ) * this.fy_min[f];
        }
        else if (this.ft[f] == ftLateral)
        {
          // this is a lateral force, so only need a param: the force intensity
          // if possitive force is to the right, else to the left
          fx = Maths.Cos ( (AllParticles[i].angle + 90.0)) * AllParticles[i].fx[f];
          fy = Maths.Sin ( (AllParticles[i].angle + 90.0)) * AllParticles[i].fx[f];
          
          AllParticles[i].fx[f] += this.fx_max[f];
        }
        else if (this.ft[f] == ftLateralRandom)
        {
        }

        f++;
      }

      AllParticles[i].velocity_x += ( fx * IntToFloat ( GetGameSpeed ( ) ) / 100.0 );
      AllParticles[i].velocity_y += ( fy * IntToFloat ( GetGameSpeed ( ) ) / 100.0 );

      // Get the new speed and angle from velocity
      AllParticles[i].speed = Maths.Sqrt(AllParticles[i].velocity_x*AllParticles[i].velocity_x +
                                         AllParticles[i].velocity_y*AllParticles[i].velocity_y);
      AllParticles[i].angle = Maths.ArcTan2 (AllParticles[i].velocity_y, AllParticles[i].velocity_x);

			
      // Save old position
      AllParticles[i].old_x = AllParticles[i].x;
      AllParticles[i].old_y = AllParticles[i].y;


      // and move it
      AllParticles[i].x += AllParticles[i].velocity_x * IntToFloat ( GetGameSpeed ( ) ) / 1000.0;
			AllParticles[i].y += AllParticles[i].velocity_y * IntToFloat ( GetGameSpeed ( ) ) / 1000.0;


      // if transparency is changing
      if (this.evolve_transparency)
      {
        AllParticles[i].inc_transparency ++;
        if (AllParticles[i].inc_transparency >= this.frec_transparency)
        {
          if (AllParticles[i].transparency > this.to_transparency)
            AllParticles[i].transparency --;
          else if (AllParticles[i].transparency < this.to_transparency)
            AllParticles[i].transparency ++;
          
          AllParticles[i].inc_transparency = 0;
        }
      }

      // if color is changing
      if (this.evolve_color && this.use_color)
      {
        AllParticles[i].inc_color ++;
        if (AllParticles[i].inc_color >= this.frec_color)
        {
          AllParticles[i].color_r    += AllParticles[i].inc_color_r;
          AllParticles[i].color_g    += AllParticles[i].inc_color_g;
          AllParticles[i].color_b    += AllParticles[i].inc_color_b;
          AllParticles[i].saturation += AllParticles[i].inc_saturation;
        
          AllParticles[i].inc_color = 0;
        }
      }

      // if scale is changing
      if (this.evolve_scale)
      {
        AllParticles[i].inc_scale ++;
        if (AllParticles[i].inc_scale >= this.frec_scale)
        {
          if (AllParticles[i].scale > this.to_scale)
            AllParticles[i].scale --;
          else if (AllParticles[i].scale < this.to_scale)
            AllParticles[i].scale ++;
        
          AllParticles[i].inc_scale = 0;
        }
      }


      // if particle is on screen
      if (FloatToInt (AllParticles[i].x) >= 0 && FloatToInt (AllParticles[i].x) < Room.Width &&
          FloatToInt (AllParticles[i].y) >= 0 && FloatToInt (AllParticles[i].y) < Room.Height)
      {
  			// Draw the particle
        
        DynamicSprite  *sprite = DynamicSprite.CreateFromExistingSprite (AllParticles[i].sprite_slot, true);

        if (this.use_scale || this.evolve_scale)
        {
          width  = sprite.Width  * AllParticles[i].scale / 100;
          height = sprite.Height * AllParticles[i].scale / 100;
      
          if (width < 1) width = 1;
          if (height < 1) height = 1;
        }
        else
        {
          width = sprite.Width;
          height = sprite.Height;
        }


        if (this.use_color || this.evolve_color)
          sprite.Tint (FloatToInt (AllParticles[i].color_r),
                       FloatToInt (AllParticles[i].color_g),
                       FloatToInt (AllParticles[i].color_b),
                       FloatToInt (AllParticles[i].saturation), 100);

        surface.DrawImage (FloatToInt ( AllParticles[i].x ), FloatToInt ( AllParticles[i].y ), sprite.Graphic, AllParticles[i].transparency, width, height);

        sprite.Delete();
      }


      // now increase the age variable
			AllParticles[i].age++;
			

			// if particle is out of bounding box
      // or it was too old
      // or its totally transparent
      if ((this.use_bound &&
          (FloatToInt ( AllParticles[i].x ) < this.bound_min_x ||
           FloatToInt ( AllParticles[i].x ) > this.bound_max_x ||
			     FloatToInt ( AllParticles[i].y ) < this.bound_min_y ||
           FloatToInt ( AllParticles[i].y ) > this.bound_max_y )) ||
          AllParticles[i].age > AllParticles[i].max_age ||
          AllParticles[i].transparency >= 100)
      {
				// remove it
        this.remove_particle ( i );
      }

		}
		
    // continue the loop
		i++;
  }


  surface.Release();


  if (this.where_to_draw == dtBackground)
  {
    // Nothing to do
  }
  else if (this.where_to_draw == dtOverlay)
  {
    if (this.ovrParticleSystem != null &&
        this.ovrParticleSystem.Valid)
      this.ovrParticleSystem.Remove();
    
    this.ovrParticleSystem = Overlay.CreateGraphical(0, 0, this.sprParticleSystem.Graphic, true);
  }
  else if (this.where_to_draw == dtSprite)
  {
    // Nothing to do
  }

}

/***************
**** Custom by paul
***************/
function ParticlesSystem::DeleteParticleNear(int x, int y, int threshold){
  int i = this.first_particle;
  while (i <= this.last_particle)
  {
    if (abs_val(FloatToInt(AllParticles[i].x)-x)<threshold && abs_val(FloatToInt(AllParticles[i].y)-y)<threshold){
      this.remove_particle(i);
      return true;
    }
    
    i++;  
  }
  
  return false;
}

function ParticlesSystem::IsParticleNear(int x, int y, int threshold){
  int i = this.first_particle;
  while (i <= this.last_particle)
  {
    if (abs_val(FloatToInt(AllParticles[i].x)-x)<threshold && abs_val(FloatToInt(AllParticles[i].y)-y)<threshold){
      return true;
    }
    
    i++;  
  }
  
  return false;
}





//===================================================================
// Member Functions
//-------------------------------------------------------------------
function ParticleSystemManager::DeleteParticleNear(int num_system, int x, int y, int threshold){
  return AllParticlesSystems[num_system].DeleteParticleNear(x, y, threshold);
}

function ParticleSystemManager::IsParticleNear(int num_system, int x, int y, int threshold){
  return AllParticlesSystems[num_system].IsParticleNear(x, y, threshold);
}

function ParticleSystemManager::CreateSystem (int n_particles, bool keep_track, enDrawType draw_type, int width, int height)
{
  AllParticlesSystems[this.num_systems].Create (n_particles, keep_track, draw_type, width, height);

  this.num_systems++;
  num_systems++;

  return (this.num_systems-1);
}

function ParticleSystemManager::DeleteLastSystem ()
{
  this.num_systems--;
  num_systems--;
  
  AllParticlesSystems[this.num_systems].Delete();
}

DynamicSprite *ParticleSystemManager::GetSystemSprite (int num_system)
{
  return AllParticlesSystems[num_system].sprParticleSystem;
}

int ParticleSystemManager::GetSystemActiveParticles (int num_system)
{
  return AllParticlesSystems[num_system].num_active_particles;
}



// Emitter functions

function ParticleSystemManager::emitter_set_position (int num_system, enPosType type, float p1, float p2, float p3, float p4, float p5, float p6)
{
  AllParticlesSystems[num_system].PositionType = type;
  AllParticlesSystems[num_system].em_p1 = p1;
  AllParticlesSystems[num_system].em_p2 = p2;
  AllParticlesSystems[num_system].em_p3 = p3;
  AllParticlesSystems[num_system].em_p4 = p4;
  AllParticlesSystems[num_system].em_p5 = p5;
  AllParticlesSystems[num_system].em_p6 = p6;
}

function ParticleSystemManager::emitter_set_velocity (int num_system, int min_speed, int max_speed, int min_angle, int max_angle)
{
  AllParticlesSystems[num_system].min_speed = min_speed;
  AllParticlesSystems[num_system].max_speed = max_speed;
  AllParticlesSystems[num_system].min_angle = min_angle;
  AllParticlesSystems[num_system].max_angle = max_angle;
}

function ParticleSystemManager::emitter_set_color (int num_system, int min_r, int min_g, int min_b, int min_saturation,
                                            int max_r, int max_g, int max_b, int max_saturation)
{
  AllParticlesSystems[num_system].use_color = true;
  AllParticlesSystems[num_system].min_color_r = min_r;
  AllParticlesSystems[num_system].min_color_g = min_g;
  AllParticlesSystems[num_system].min_color_b = min_b;
  AllParticlesSystems[num_system].min_saturation = min_saturation;
  AllParticlesSystems[num_system].max_color_r = max_r;
  AllParticlesSystems[num_system].max_color_g = max_g;
  AllParticlesSystems[num_system].max_color_b = max_b;
  AllParticlesSystems[num_system].max_saturation = max_saturation;
}

function ParticleSystemManager::emitter_set_transparency (int num_system, int min_trans, int max_trans)
{
  AllParticlesSystems[num_system].use_transparency = true;
  AllParticlesSystems[num_system].min_transparency = min_trans;
  AllParticlesSystems[num_system].max_transparency = max_trans;
}

function ParticleSystemManager::emitter_set_scale (int num_system, int min_scale, int max_scale)
{
  AllParticlesSystems[num_system].use_scale = true;
  AllParticlesSystems[num_system].min_scale = min_scale;
  AllParticlesSystems[num_system].max_scale = max_scale;
}
  
function ParticleSystemManager::emitter_set_age (int num_system, int min_age, int max_age)
{
  AllParticlesSystems[num_system].min_age = min_age;
  AllParticlesSystems[num_system].max_age = max_age;
}

function ParticleSystemManager::emitter_set_sprite (int num_system, int min_slot, int max_slot)
{
  AllParticlesSystems[num_system].min_slot = min_slot;
  AllParticlesSystems[num_system].num_slots = max_slot - min_slot;
}

function ParticleSystemManager::emitter_creation_mode (int num_system, enRepeatMode rep_mode, int max_rep, int frecuency, int n_particles)
{
  // How & when to create particles
  // and number of particles to create
  AllParticlesSystems[num_system].emit_rep_mode = rep_mode;
  AllParticlesSystems[num_system].max_rep = max_rep;
  AllParticlesSystems[num_system].num_rep = 0;
  AllParticlesSystems[num_system].emit_frecuency = frecuency;
  AllParticlesSystems[num_system].emit_num_particles = n_particles;
}


// Actions functions

function ParticleSystemManager::action_set_bound_box (int num_system, int min_x, int min_y, int max_x, int max_y)
{
  // Bound box of particle system
  AllParticlesSystems[num_system].use_bound = true;
  AllParticlesSystems[num_system].bound_min_x = min_x;
  AllParticlesSystems[num_system].bound_max_x = max_x;
  AllParticlesSystems[num_system].bound_min_y = min_y;
  AllParticlesSystems[num_system].bound_max_y = max_y;
}

function ParticleSystemManager::action_set_color_evolution (int num_system, int to_r, int to_g, int to_b, int to_saturation, int frec)
{
  AllParticlesSystems[num_system].evolve_color = true;
  AllParticlesSystems[num_system].to_color_r = to_r;
  AllParticlesSystems[num_system].to_color_g = to_g;
  AllParticlesSystems[num_system].to_color_b = to_b;
  AllParticlesSystems[num_system].to_saturation = to_saturation;
  AllParticlesSystems[num_system].frec_color = frec;
}

function ParticleSystemManager::action_set_transparency_evolution (int num_system, int to_trans, int frec)
{
  AllParticlesSystems[num_system].evolve_transparency = true;
  AllParticlesSystems[num_system].to_transparency = to_trans;
  AllParticlesSystems[num_system].frec_transparency = frec;
}

function ParticleSystemManager::action_set_scale_evolution (int num_system, int to_scale, int frec)
{
  AllParticlesSystems[num_system].evolve_scale = true;
  AllParticlesSystems[num_system].to_scale = to_scale;
  AllParticlesSystems[num_system].frec_scale = frec;
}

function ParticleSystemManager::action_add_force (int num_system, enForceType type, float p1, float p2, float p3, float p4, float p5, float p6)
{
  AllParticlesSystems[num_system].ft[AllParticlesSystems[num_system].num_forces] = type;
  AllParticlesSystems[num_system].fx_min[AllParticlesSystems[num_system].num_forces] = p1;
  AllParticlesSystems[num_system].fy_min[AllParticlesSystems[num_system].num_forces] = p2;
  AllParticlesSystems[num_system].fx_max[AllParticlesSystems[num_system].num_forces] = p3;
  AllParticlesSystems[num_system].fy_max[AllParticlesSystems[num_system].num_forces] = p4;
  AllParticlesSystems[num_system].fx_inc[AllParticlesSystems[num_system].num_forces] = p5;
  AllParticlesSystems[num_system].fy_inc[AllParticlesSystems[num_system].num_forces] = p6;
  
  AllParticlesSystems[num_system].num_forces ++;
  
  return (AllParticlesSystems[num_system].num_forces - 1);
}


function ParticleSystemManager::action_update_force (int num_system, int num_force, enForceType type, float p1, float p2, float p3, float p4, float p5, float p6)
{
  AllParticlesSystems[num_system].ft[num_force] = type;
  AllParticlesSystems[num_system].fx_min[num_force] = p1;
  AllParticlesSystems[num_system].fy_min[num_force] = p2;
  AllParticlesSystems[num_system].fx_max[num_force] = p3;
  AllParticlesSystems[num_system].fy_max[num_force] = p4;
  AllParticlesSystems[num_system].fx_inc[num_force] = p5;
  AllParticlesSystems[num_system].fy_inc[num_force] = p6;
  
  int i = AllParticlesSystems[num_system].first_particle;
  
  while (i <= AllParticlesSystems[num_system].last_particle)
  {
    
    if (type == ftSidetoSide)
    {
      AllParticles[i].fx_inc[num_force] = p5;
      AllParticles[i].fy_inc[num_force] = p6;
    
      AllParticles[i].fx[num_force] = IntToFloat (Random (FloatToInt(p3-p1))) + p1;
      AllParticles[i].fy[num_force] = IntToFloat (Random (FloatToInt(p4-p2))) + p2;
    
    }
    else if (type == ftLateral)
    {
      AllParticles[i].fx[num_force] = IntToFloat (Random (FloatToInt(p2-p1))) + p1;
    }
    
    
    i++;
  }
}

//function ParticleSystemManager::action_when_condition ();







//===================================================================
// Ags Standard Events                     
//-------------------------------------------------------------------

//===================================================================
   function game_start() {
//
// This is the first event that is triggered after the game is loaded
// into memory.  It's purpose is to initialize the game.  
//-------------------------------------------------------------------
}

//===================================================================
   function repeatedly_execute() {
//
// This event is triggered each game cycle. Addition of code to this 
// even should be done carefully to avoid unacceptable performance 
// degradation.  If there is way to avoid putting code in this event 
// then it is generally advisable to do so.
//-------------------------------------------------------------------
}

//===================================================================
   function repeatedly_execute_always() {
//
// This  event  is  triggered each  game cycle, even  when a blocking 
// routine (eg. speech/cutscene) is in progress.  Blocking  functions 
// cannot be called from this event handler. Addition of code to this
// event should  be  done carefully to avoid unacceptable performance 
// degradation. If there is a way to avoid putting code in this event
// then it is generally advisable to do so.
//-------------------------------------------------------------------

  int i;

  if (num_systems)
  {
    // restore the screen every frame
    RawRestoreScreen ( );

    // for every particles system
    i = 0;
    while (i < num_systems)
    {
      if (AllParticlesSystems[i].use_this_system)
      {
        // handle the particles
        AllParticlesSystems[i].update_particles ( );
      }
  
      i++;
    }
  }

}

//===================================================================
   function on_event (EventType event, int data) {
//
// This  event  is  triggered in response to a number of standard AGS
// game events. See the AGS  manual  for more details.  The EVENT and 
// DATA parameters are used to decode the specific event as follows:
//
// EVENT                         DATA
// eEventEnterRoomBeforeFadein   new room number
// eEventLeaveRoom               room number they are leaving
// eEventGotScore                number of points they got
// eEventGUIMouseDown            GUI number
// eEventGUIMouseUp              GUI number
// eEventAddInventory            inventory item number that was added
// eEventLoseInventory           inventory item number that was lost
// eEventRestoreGame             save slot number
//-------------------------------------------------------------------

  if (event == eEventEnterRoomBeforeFadein)
  {
    RawSaveScreen();
  }
  else if (event == eEventLeaveRoom)
  {
    int i;

    // for every particles system
    i = 0;
    while (i < num_systems)
    {
      if (AllParticlesSystems[i].use_this_system)
      {
        // Remove particle system overlay
        if (AllParticlesSystems[i].ovrParticleSystem != null &&
            AllParticlesSystems[i].ovrParticleSystem.Valid)
          AllParticlesSystems[i].ovrParticleSystem.Remove();
      }
  
      i++;
    }

  }
}

//===================================================================
   int      PrevKey;
   function on_key_press(int keycode) {
//
// This  event  is triggered whenever a keyboard key is pressed.  The
// parameter  KEYCODE identifies which key was pressed.  All possible
// keycodes are given below.  See the AGS manual for more details.
//
// KEYCODE   DESCRIPTION         KEYCODE   DESCRIPTION  
// 1..26     Ctrl+A .. Ctrl+Z    8         Backspace (Ctrl+H)
// 9         Tab (Ctrl+I)        13        Enter (Ctrl+M)
// 27        Escape              32        Space
// 48..57   '0' .. '9'           65..90   'A' .. 'Z' (uppercase)
// 359..368  F1 .. F10           371       Home (numeric pad)
// 372       Up arrow            373       PgUp (numeric pad)
// 375       Left arrow          376      '5'   (numeric pad)
// 377       Right arrow         379       End  (numeric pad)
// 380       Down arrow          381       PgDn (numeric pad)
// 433..434  F11 .. F12         
//-------------------------------------------------------------------
}

//===================================================================
   function on_mouse_click(int button) {
//
// This event is triggered whenever a mouse button is pressed.  The 
// button parameter identifies which mouse button was pressed as 
// follows:
//    eMouseLeft,       eMouseRight,       eMouseMiddle,
//    eMouseLeftInv,    eMouseRightInv,
//    eMouseWheelNorth, eMouseWheelSouth
//-------------------------------------------------------------------
}

//===================================================================
   function unhandled_event(int what, int type) {
//
// This  function is called when an interaction is run, but no events
// are listed  in  the  AGS  interaction  window.  The WHAT  and TYPE
// parameters tell you what the player did. Their possible values are 
// listed below:
// 
//    WHAT TYPE Hotspot Interaction     WHAT TYPE Object Interaction
//     1    1   Look at                  2    0   Look at 
//     1    2   Interact with            2    1   Interact with
//     1    3   Use inventory on         2    2   Talk to
//     1    4   Talk to                  2    3   Use inventory on 
//     1    7   Pick up                  2    5   Pick up
//     1    8   Cursor Mode 8 on         2    6   Cursor Mode 8 on
//     1    9   Cursor Mode 9 on         2    7   Cursor Mode 9 on
//
//    WHAT TYPE Character Interaction   WHAT TYPE Nothing Interaction
//     3    0   Look at                  4    1   Look at 
//     3    1   Interact with            4    2   Interact with
//     3    2   Talk to                  4    3   Use inventory with
//     3    3   Use inventory on         4    4   Talk to
//     3    5   Pick up 
//     3    6   Cursor Mode 8 on 
//     3    7   Cursor Mode 9 on 
//                                       
//    WHAT TYPE Inventory Interaction   
//     5    0   Look at 
//     5    1   Interact with (currently not possible)
//     5    2   Talk to 
//     5    3   Use an inventory item on another
//     5    4   Other click on 
//-------------------------------------------------------------------
}

//===================================================================
   function dialog_request(int parameter) {
//
// This  function is called when a dialog script line "run-script" is
// processed.  PARAMETER  is  the value  of  the number following the 
// "run-script" on that line of the dialog script. 
//-------------------------------------------------------------------
}
